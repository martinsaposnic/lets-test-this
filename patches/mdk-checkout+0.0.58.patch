diff --git a/node_modules/mdk-checkout/dist/server/mdk.js b/node_modules/mdk-checkout/dist/server/mdk.js
index 04c7e61..b8d3694 100644
--- a/node_modules/mdk-checkout/dist/server/mdk.js
+++ b/node_modules/mdk-checkout/dist/server/mdk.js
@@ -8,12 +8,31 @@ function getGlobalState() {
     return globalObject[globalKey];
 }
 function readEnv() {
+    var _a, _b, _c, _d, _e, _f;
+    const nodeOptions = {
+        network: (_a = process.env.MDK_NETWORK) !== null && _a !== void 0 ? _a : undefined,
+        vssUrl: (_b = process.env.MDK_VSS_URL) !== null && _b !== void 0 ? _b : undefined,
+        esploraUrl: (_c = process.env.MDK_ESPLORA_URL) !== null && _c !== void 0 ? _c : undefined,
+        rgsUrl: (_d = process.env.MDK_RGS_URL) !== null && _d !== void 0 ? _d : undefined,
+        lspNodeId: (_e = process.env.MDK_LSP_NODE_ID) !== null && _e !== void 0 ? _e : undefined,
+        lspAddress: (_f = process.env.MDK_LSP_ADDRESS) !== null && _f !== void 0 ? _f : undefined,
+    };
     return {
         accessToken: process.env.MDK_ACCESS_TOKEN,
         mnemonic: process.env.MDK_MNEMONIC,
         baseUrl: process.env.MDK_API_BASE_URL,
+        nodeOptions,
     };
 }
+function mergeNodeOptions(envNodeOptions, overrideNodeOptions) {
+    const merged = { ...envNodeOptions, ...overrideNodeOptions };
+    Object.keys(merged).forEach((key) => {
+        if (merged[key] === undefined || merged[key] === '') {
+            delete merged[key];
+        }
+    });
+    return Object.keys(merged).length > 0 ? merged : undefined;
+}
 function serializeOptions(options) {
     const { accessToken, mnemonic, ...rest } = options;
     return JSON.stringify({
@@ -33,7 +52,7 @@ export function resolveMoneyDevKitOptions(overrides = {}) {
         accessToken,
         mnemonic,
         baseUrl: overrides.baseUrl ?? env.baseUrl,
-        nodeOptions: overrides.nodeOptions,
+        nodeOptions: mergeNodeOptions(env.nodeOptions, overrides.nodeOptions),
     };
 }
 export function getMoneyDevKit(options = {}) {
